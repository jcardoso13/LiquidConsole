name: Build and Run

on:
  workflow_call:
    inputs:
      input-file:
        description: 'file path'
        required: true
        type: string
      liquid-string:
        description: 'Liquid file path'
        required: true
        type: string
      output-format:
        description: 'Output format'
        required: false
        type: string
        default: 'txt'
    outputs:
      output-json:
        description: 'The output JSON file'
        value: ${{ jobs.build-and-run.outputs.output-json }}

jobs:
  build-and-run:
    runs-on: ubuntu-latest
    outputs:
      output-json: ./output.json
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Clone Git Repo
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
      run: |
        git clone https://x-access-token:${GITHUB_TOKEN}@github.com/bdsoflow/gh-data-transform.git
        cd ./LiquidConsole/
        pwd
        ls

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./LiquidConsole

    - name: Build the project
      run: dotnet build --configuration Release --no-restore
      working-directory: ./LiquidConsole

    - name: Determine input format
      id: determine-input-format
      run: |
        input_format=$(echo "${{ inputs.input-file }}" | awk -F. '{print $NF}')
        echo "input-format=$input_format" >> $GITHUB_ENV

    - name: Save input to file
      run: |
        echo ${{ inputs.input-file }}
        cat ../${{ inputs.input-file }}
        cat ../${{ inputs.input-file }} > input.${{ env.input-format }}
      working-directory: ./LiquidConsole

    - name: Save Liquid string to file
      run: |
        echo ${{ inputs.liquid-string }}
        cat ../${{ inputs.liquid-string }}
        cat ../${{ inputs.liquid-string }} > transform.liquid
      working-directory: ./LiquidConsole

    - name: Run the project
      run: dotnet run --configuration Release ./input.${{ env.input-format }} ./transform.liquid ./output.${{ inputs.output-format }}
      working-directory: ./LiquidConsole

    - name: Upload Logs as artifact
      id: upload-output
      run: |
        pwd
        ls
        if [ "${{ inputs.output-format }}" == "json" ]; then
          cat ./output.${{ inputs.output-format }} | jq '.' > formatted_output
        else
          cat ./output.${{ inputs.output-format }} > formatted_output
        fi
        echo "## CloudLiquid Logs ðŸš€" >> ./summary.md
        echo "### Input Data" >> ./summary.md
        echo "\`\`\`${{ env.input-format }}" >> ./summary.md
        cat ./input.json >> ./summary.md
        echo "" >> ./summary.md
        echo "\`\`\`" >> ./summary.md
        echo "" >> ./summary.md
        echo "### Liquid Transform" >> ./summary.md
        echo "\`\`\`html" >> ./summary.md
        cat ./transform.liquid >> ./summary.md
        echo "" >> ./summary.md
        echo "\`\`\`" >> ./summary.md
        echo "" >> ./summary.md
        echo "### Output Data" >> ./summary.md
        echo "\`\`\`${{ inputs.output-format }}" >> ./summary.md
        cat ./formatted_output >> ./summary.md
        echo "" >> ./summary.md
        echo "\`\`\`" >> ./summary.md
        cat ./summary.md
        cat ./summary.md > $GITHUB_STEP_SUMMARY
      working-directory: ./LiquidConsole

    - name: Upload output.file as artifact
      uses: actions/upload-artifact@v4
      with:
        name: output-file
        path: ./LiquidConsole/output.${{ inputs.output-format }}

