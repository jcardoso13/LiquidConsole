name: Build and Run

on:
  workflow_call:
    secrets:
      GH_TOKEN:
        required: false
    inputs:
      input-file:
        description: 'file path'
        required: true
        type: string
      liquid-file:
        description: 'Liquid file path'
        required: true
        type: string
      output-file:
        description: 'Output format'
        required: false
        type: string
        default: 'output'
      liquid-repo:
        description: 'liquid repo full name'
        required: false
        type: string
        default: jcardoso13/LiquidConsole
    outputs:
      output-json:
        description: 'The output JSON file'
        value: ${{ jobs.build-and-run.outputs.output-json }}



jobs:
  build-and-run:
    runs-on: ubuntu-latest
    outputs:
      output-json: ./output.json
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Checkout tools repo
      uses: actions/checkout@v4
      with:
        repository: ${{inputs.liquid-repo}}
        path: LiquidConsole
        ref: main
        token: ${{ secrets.GH_TOKEN }}
    - name: Download input json artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.input-file }}
        path: "./LiquidConsole/input.${{ env.input-format }}"
    - name: Download liquid artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{inputs.liquid-file}}
        path: "./LiquidConsole/transform.liquid"

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./LiquidConsole

    - name: Build the project
      run: dotnet build --configuration Release --no-restore
      working-directory: ./LiquidConsole

    - name: Determine input format
      id: determine-input-format
      run: |
        input_format=$(echo "${{ inputs.input-file }}" | awk -F. '{print $NF}')
        echo "input-format=$input_format" >> $GITHUB_ENV

    - name: Determine input format
      id: determine-output-format
      run: |
        output_format=$(echo "${{ inputs.output-file }}" | awk -F. '{print $NF}')
        echo "output-format=$output_format" >> $GITHUB_ENV

    # - name: Save input to file
    #   run: |
    #     echo ${{ inputs.input-file }}
    #     cat ../${{ inputs.input-file }}
    #     cat ../${{ inputs.input-file }} > input.${{ env.input-format }}
    #   working-directory: ./LiquidConsole

    # - name: Save Liquid string to file
    #   run: |
    #     echo ${{ inputs.liquid-file }}
    #     cat ../${{ inputs.liquid-file }}
    #     cat ../${{ inputs.liquid-file }} > transform.liquid
    #   working-directory: ./LiquidConsole

    - name: Run the project
      run: dotnet run --configuration Release ./input.${{ env.input-format }} ./transform.liquid ./${{inputs.output-file}}
      working-directory: ./LiquidConsole

    - name: Upload Logs as artifact
      id: upload-output
      run: |
        pwd
        ls
        if [ "${{ env.output_format}}" == "json" ]; then
          cat ${{ inputs.output-file }} | jq '.' > formatted_output
        else
          cat ${{ inputs.output-file }} > formatted_output
        fi
        echo "## CloudLiquid Logs ðŸš€" >> ./summary.md
        echo "### Input Data" >> ./summary.md
        echo "\`\`\`${{ env.input-format }}" >> ./summary.md
        cat ./input.json >> ./summary.md
        echo "" >> ./summary.md
        echo "\`\`\`" >> ./summary.md
        echo "" >> ./summary.md
        echo "### Liquid Transform" >> ./summary.md
        echo "\`\`\`html" >> ./summary.md
        cat ./transform.liquid >> ./summary.md
        echo "" >> ./summary.md
        echo "\`\`\`" >> ./summary.md
        echo "" >> ./summary.md
        echo "### Output Data" >> ./summary.md
        echo "\`\`\`${{ env.output_format}}" >> ./summary.md
        cat ./formatted_output >> ./summary.md
        echo "" >> ./summary.md
        echo "\`\`\`" >> ./summary.md
        cat ./summary.md
        cat ./summary.md > $GITHUB_STEP_SUMMARY
      working-directory: ./LiquidConsole

    - name: Upload output.file as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.output-file }}
        path: ./LiquidConsole/${{ inputs.output-file }}

